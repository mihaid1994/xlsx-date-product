// js/basefunc.js
class ExcelProcessor {
  constructor() {
    this.requiredColumns = ["–î–∞—Ç–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è", "–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏"];
    this.newColumns = ["–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –≤ –º–µ—Å—è—Ü–∞—Ö –æ–±—â–∏–π", "–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—è—Ü–µ–≤"];
    this.uploadedFiles = [];
    this.processedFiles = [];
    this.fileAnalysis = [];
    this.init();
  }

  init() {
    this.setupEventListeners();
    this.updateCurrentDate();
    this.injectAnalysisStyles();
  }

  injectAnalysisStyles() {
    const style = document.createElement("style");
    style.textContent = `
      .file-analysis {
        margin-top: 15px;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 8px;
        border-left: 4px solid #007bff;
      }
      .analysis-header {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 12px;
        font-size: 14px;
      }
      .status-success { color: #28a745; }
      .status-error { color: #dc3545; }
      .analysis-details {
        font-size: 13px;
        line-height: 1.5;
      }
      .detail-row {
        margin-bottom: 8px;
        display: flex;
        flex-wrap: wrap;
        align-items: flex-start;
        gap: 8px;
      }
      .detail-row span:first-child {
        color: #666;
        min-width: 200px;
      }
      .new-columns-info {
        flex-direction: column;
        align-items: flex-start;
        background: #e8f4fd;
        padding: 10px;
        border-radius: 5px;
        margin-top: 10px;
      }
      .new-columns-list {
        margin-top: 5px;
        width: 100%;
      }
      .new-column {
        color: #0066cc;
        font-size: 12px;
        margin-bottom: 3px;
      }
      .error-row {
        background: #fff2f2;
        padding: 8px;
        border-radius: 4px;
        border-left: 3px solid #dc3545;
        flex-direction: column;
        align-items: flex-start;
      }
      .missing-columns {
        color: #dc3545;
        font-weight: bold;
        margin-top: 5px;
      }
      .error-message {
        color: #dc3545;
        font-weight: bold;
        margin-top: 8px;
      }
    `;
    document.head.appendChild(style);
  }

  setupEventListeners() {
    const fileInput = document.getElementById("fileInput");
    const uploadArea = document.getElementById("uploadArea");
    const processBtn = document.getElementById("processBtn");

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
    fileInput.addEventListener(
      "change",
      async (e) => await this.handleFiles(e.target.files)
    );

    // Drag & Drop
    uploadArea.addEventListener("dragover", (e) => {
      e.preventDefault();
      uploadArea.classList.add("dragover");
    });

    uploadArea.addEventListener("dragleave", (e) => {
      e.preventDefault();
      uploadArea.classList.remove("dragover");
    });

    uploadArea.addEventListener("drop", async (e) => {
      e.preventDefault();
      uploadArea.classList.remove("dragover");
      await this.handleFiles(e.dataTransfer.files);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
    processBtn.addEventListener("click", () => this.processFiles());
  }

  updateCurrentDate() {
    const now = new Date();
    const dateStr = now.toLocaleDateString("ru-RU", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    });
    document.getElementById("currentDate").textContent = dateStr;
  }

  async handleFiles(files) {
    this.uploadedFiles = [];

    for (let file of files) {
      if (this.isValidExcelFile(file)) {
        this.uploadedFiles.push(file);
      } else {
        this.showError(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: ${file.name}`);
      }
    }

    if (this.uploadedFiles.length > 0) {
      await this.analyzeFilesBeforeProcessing();
      this.displayUploadedFiles();
    }
  }

  async analyzeFilesBeforeProcessing() {
    const analysisResults = [];

    for (let file of this.uploadedFiles) {
      try {
        const analysis = await this.analyzeFile(file);
        analysisResults.push(analysis);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ ${file.name}:`, error);
        analysisResults.push({
          fileName: file.name,
          error: error.message,
        });
      }
    }

    this.fileAnalysis = analysisResults;
  }

  async analyzeFile(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();

      reader.onload = (e) => {
        try {
          const data = new Uint8Array(e.target.result);
          const workbook = XLSX.read(data, { type: "array" });
          const sheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[sheetName];
          const jsonData = XLSX.utils.sheet_to_json(worksheet);

          if (jsonData.length === 0) {
            reject(new Error("–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö"));
            return;
          }

          const firstRow = jsonData[0];
          const existingColumns = Object.keys(firstRow);

          // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
          const lastFilledColumnIndex = this.findLastFilledColumn(jsonData);
          const nextColumnPosition = lastFilledColumnIndex + 1;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
          const missingColumns = this.requiredColumns.filter(
            (col) => !existingColumns.includes(col)
          );

          resolve({
            fileName: file.name,
            totalColumns: existingColumns.length,
            existingColumns: existingColumns,
            lastFilledColumn:
              existingColumns[lastFilledColumnIndex] || "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
            nextColumnPosition: nextColumnPosition,
            newColumnsWillBe: this.newColumns.map((col, index) => ({
              name: col,
              position: nextColumnPosition + index + 1,
            })),
            missingRequiredColumns: missingColumns,
            isValid: missingColumns.length === 0,
            totalRows: jsonData.length,
          });
        } catch (error) {
          reject(error);
        }
      };

      reader.onerror = () => reject(new Error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞"));
      reader.readAsArrayBuffer(file);
    });
  }

  findLastFilledColumn(data) {
    if (data.length === 0) return -1;

    const firstRow = data[0]; // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    const allColumns = Object.keys(firstRow);
    let lastFilledIndex = -1;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏) –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    allColumns.forEach((column, index) => {
      const headerValue = firstRow[column];
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
      if (
        headerValue !== null &&
        headerValue !== undefined &&
        headerValue !== ""
      ) {
        lastFilledIndex = index;
      }
    });

    return lastFilledIndex;
  }

  isValidExcelFile(file) {
    const validExtensions = [".xlsx", ".xls"];
    const fileName = file.name.toLowerCase();
    return validExtensions.some((ext) => fileName.endsWith(ext));
  }

  displayUploadedFiles() {
    const uploadedFilesDiv = document.getElementById("uploadedFiles");
    const filesList = document.getElementById("filesList");

    filesList.innerHTML = "";

    this.uploadedFiles.forEach((file, index) => {
      const analysis = this.fileAnalysis[index];

      const fileItem = document.createElement("div");
      fileItem.className = "file-item fade-in";

      let analysisHtml = "";
      if (analysis && !analysis.error) {
        const statusClass = analysis.isValid
          ? "status-success"
          : "status-error";
        const statusIcon = analysis.isValid
          ? "fa-check-circle"
          : "fa-exclamation-triangle";

        analysisHtml = `
          <div class="file-analysis">
            <div class="analysis-header">
              <i class="fas ${statusIcon} ${statusClass}"></i>
              <strong>–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞:</strong>
            </div>
            <div class="analysis-details">
              <div class="detail-row">
                <span>üìä –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:</span> 
                <strong>${analysis.totalRows}</strong>
              </div>
              <div class="detail-row">
                <span>üìã –°—Ç–æ–ª–±—Ü–æ–≤:</span> 
                <strong>${analysis.totalColumns}</strong>
              </div>
              <div class="detail-row">
                <span>üéØ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü:</span> 
                <strong>"${analysis.lastFilledColumn}"</strong>
              </div>
              <div class="detail-row new-columns-info">
                <span>‚ûï –ù–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã:</span>
                <div class="new-columns-list">
                  ${analysis.newColumnsWillBe
                    .map(
                      (col) =>
                        `<div class="new-column">‚Ä¢ –°—Ç–æ–ª–±–µ—Ü ${col.position}: "<strong>${col.name}</strong>"</div>`
                    )
                    .join("")}
                </div>
              </div>
              ${
                analysis.missingRequiredColumns.length > 0
                  ? `
                <div class="detail-row error-row">
                  <span>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:</span>
                  <div class="missing-columns">${analysis.missingRequiredColumns.join(
                    ", "
                  )}</div>
                </div>
              `
                  : ""
              }
            </div>
          </div>
        `;
      } else if (analysis && analysis.error) {
        analysisHtml = `
          <div class="file-analysis">
            <div class="analysis-header">
              <i class="fas fa-exclamation-triangle status-error"></i>
              <strong>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:</strong>
            </div>
            <div class="error-message">${analysis.error}</div>
          </div>
        `;
      }

      fileItem.innerHTML = `
        <div class="file-info">
          <i class="fas fa-file-excel file-icon"></i>
          <div class="file-details">
            <div class="file-name">${file.name}</div>
            <div class="file-size">${(file.size / 1024).toFixed(1)} KB</div>
          </div>
        </div>
        ${analysisHtml}
      `;

      filesList.appendChild(fileItem);
    });

    uploadedFilesDiv.style.display = "block";
    uploadedFilesDiv.classList.add("fade-in");

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    this.displayProcessingReadiness();
  }

  displayProcessingReadiness() {
    let existingReadiness = document.getElementById("processingReadiness");
    if (existingReadiness) {
      existingReadiness.remove();
    }

    const validFiles = this.fileAnalysis.filter(
      (analysis) => !analysis.error && analysis.isValid
    ).length;

    const invalidFiles = this.fileAnalysis.length - validFiles;

    const readinessDiv = document.createElement("div");
    readinessDiv.id = "processingReadiness";
    readinessDiv.className = "processing-readiness fade-in";

    if (invalidFiles === 0) {
      readinessDiv.innerHTML = `
        <div class="readiness-success">
          <i class="fas fa-check-circle"></i>
          <strong>–ì–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ!</strong> –í—Å–µ ${validFiles} —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.
        </div>
      `;
    } else {
      readinessDiv.innerHTML = `
        <div class="readiness-warning">
          <i class="fas fa-exclamation-triangle"></i>
          <strong>–í–Ω–∏–º–∞–Ω–∏–µ:</strong> ${validFiles} —Ñ–∞–π–ª–æ–≤ –≥–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ, ${invalidFiles} —Å –æ—à–∏–±–∫–∞–º–∏.
          <br><small>–§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏ –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è.</small>
        </div>
      `;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞
    if (!document.getElementById("readiness-styles")) {
      const style = document.createElement("style");
      style.id = "readiness-styles";
      style.textContent = `
        .processing-readiness {
          margin: 15px 0;
          padding: 15px;
          border-radius: 8px;
          text-align: center;
        }
        .readiness-success {
          background: #d4edda;
          color: #155724;
          border: 1px solid #c3e6cb;
        }
        .readiness-warning {
          background: #fff3cd;
          color: #856404;
          border: 1px solid #ffeaa7;
        }
        .readiness-success i, .readiness-warning i {
          margin-right: 8px;
        }
      `;
      document.head.appendChild(style);
    }

    const uploadedFilesDiv = document.getElementById("uploadedFiles");
    uploadedFilesDiv.appendChild(readinessDiv);
  }

  async processFiles() {
    const processBtn = document.getElementById("processBtn");
    const progressSection = document.getElementById("progressSection");
    const resultsSection = document.getElementById("resultsSection");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
    const invalidFiles = this.fileAnalysis.filter(
      (analysis) => analysis.error || !analysis.isValid
    );

    if (invalidFiles.length > 0) {
      const fileNames = invalidFiles.map((f) => f.fileName).join(", ");
      alert(
        `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏: ${fileNames}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.`
      );
      return;
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    processBtn.disabled = true;
    progressSection.style.display = "block";
    progressSection.classList.add("fade-in");
    resultsSection.style.display = "none";

    this.processedFiles = [];
    const errors = [];

    for (let i = 0; i < this.uploadedFiles.length; i++) {
      const file = this.uploadedFiles[i];

      try {
        this.updateProgress(
          (i / this.uploadedFiles.length) * 100,
          `–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${file.name}`
        );

        const processedData = await this.processFile(file);
        this.processedFiles.push({
          name: `processed_${file.name.replace(/\.(xls|xlsx)$/i, ".xlsx")}`,
          originalName: file.name,
          data: processedData,
        });
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${file.name}:`, error);
        errors.push(`–û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ ${file.name}: ${error.message}`);
      }
    }

    this.updateProgress(100, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    setTimeout(() => {
      progressSection.style.display = "none";
      this.displayResults(errors);
      processBtn.disabled = false;
    }, 1000);
  }

  async processFile(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();

      reader.onload = (e) => {
        try {
          const data = new Uint8Array(e.target.result);
          const workbook = XLSX.read(data, { type: "array" });

          // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
          const sheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[sheetName];

          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON
          const jsonData = XLSX.utils.sheet_to_json(worksheet);

          if (jsonData.length === 0) {
            reject(new Error("–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö"));
            return;
          }

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
          const processedData = this.processDataFrame(jsonData);

          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Excel —Ñ–∞–π–ª
          const newWorkbook = XLSX.utils.book_new();
          const newWorksheet = XLSX.utils.json_to_sheet(processedData);

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
          this.setColumnWidths(newWorksheet, processedData);

          XLSX.utils.book_append_sheet(newWorkbook, newWorksheet, "TDSheet");

          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          const excelBuffer = XLSX.write(newWorkbook, {
            bookType: "xlsx",
            type: "array",
          });

          resolve(excelBuffer);
        } catch (error) {
          reject(error);
        }
      };

      reader.onerror = () => reject(new Error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞"));
      reader.readAsArrayBuffer(file);
    });
  }

  findAvailableColumns(existingColumns, newColumns) {
    // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ - –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –∫–æ–Ω–µ—Ü
    const availableColumnNames = {};

    newColumns.forEach((newColumnName) => {
      availableColumnNames[newColumnName] = newColumnName;
    });

    return availableColumnNames;
  }

  setColumnWidths(worksheet, data) {
    const cols = [];

    if (data.length === 0) return;

    const headers = Object.keys(data[0]);

    headers.forEach((header, index) => {
      let width = 15; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

      // –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
      if (
        header.toLowerCase().includes("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ") ||
        header.toLowerCase().includes("–Ω–∞–∑–≤–∞–Ω–∏–µ") ||
        header.toLowerCase().includes("—Ç–æ–≤–∞—Ä") ||
        header.toLowerCase().includes("–ø—Ä–æ–¥—É–∫—Ç")
      ) {
        width = 35; // –ë–æ–ª—å—à–µ –¥–ª—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π
      } else if (header.includes("–î–∞—Ç–∞") || header.includes("–°—Ä–æ–∫")) {
        width = 20; // –î–ª—è –¥–∞—Ç
      } else if (header.includes("–º–µ—Å—è—Ü") || header.includes("–û—Å—Ç–∞–ª–æ—Å—å")) {
        width = 18; // –î–ª—è —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ —Å—Ç–æ–ª–±—Ü–µ
      const maxContentLength = Math.max(
        header.length,
        ...data.slice(0, 100).map((row) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
          const value = row[header];
          return value ? String(value).length : 0;
        })
      );

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–∞–∫ –º–∞–∫—Å–∏–º—É–º –º–µ–∂–¥—É –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏ –¥–ª–∏–Ω–æ–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      width = Math.max(width, Math.min(maxContentLength + 2, 50)); // +2 –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤, –º–∞–∫—Å–∏–º—É–º 50

      cols.push({ width: width });
    });

    worksheet["!cols"] = cols;
  }

  processDataFrame(data) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    const firstRow = data[0];
    const availableColumns = Object.keys(firstRow);

    const missingColumns = this.requiredColumns.filter(
      (col) => !availableColumns.includes(col)
    );

    if (missingColumns.length > 0) {
      throw new Error(
        `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: ${missingColumns.join(", ")}`
      );
    }

    // –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ (–ø—Ä–æ—Å—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞)
    const columnMapping = this.findAvailableColumns(
      [...availableColumns],
      [...this.newColumns]
    );

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    const processedData = data.map((row) => {
      const newRow = { ...row };

      // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
      const manufactureDate = this.parseDate(row["–î–∞—Ç–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"]);
      const expiryDate = this.parseDate(row["–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏"]);

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –≤ –º–µ—Å—è—Ü–∞—Ö
      const totalMonthsColumnName =
        columnMapping["–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –≤ –º–µ—Å—è—Ü–∞—Ö –æ–±—â–∏–π"];
      newRow[totalMonthsColumnName] = this.calculateMonthsDifference(
        manufactureDate,
        expiryDate
      );

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º–µ—Å—è—Ü—ã
      const currentDate = new Date();
      const remainingMonthsColumnName = columnMapping["–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—è—Ü–µ–≤"];
      newRow[remainingMonthsColumnName] = this.calculateMonthsDifference(
        currentDate,
        expiryDate
      );

      return newRow;
    });

    return processedData;
  }

  parseDate(dateStr) {
    if (!dateStr || dateStr === "" || dateStr == null) {
      return null;
    }

    try {
      // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –æ–±—ä–µ–∫—Ç Date
      if (dateStr instanceof Date) {
        return dateStr;
      }

      // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
      if (typeof dateStr === "string") {
        dateStr = dateStr.trim();

        // –§–æ—Ä–º–∞—Ç DD.MM.YYYY
        if (dateStr.includes(".")) {
          const parts = dateStr.split(".");
          if (parts.length === 3) {
            const day = parseInt(parts[0]);
            const month = parseInt(parts[1]) - 1; // –º–µ—Å—è—Ü—ã –≤ JS –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
            const year = parseInt(parts[2]);
            return new Date(year, month, day);
          }
        }

        // –§–æ—Ä–º–∞—Ç DD/MM/YYYY
        if (dateStr.includes("/")) {
          const parts = dateStr.split("/");
          if (parts.length === 3) {
            const day = parseInt(parts[0]);
            const month = parseInt(parts[1]) - 1;
            const year = parseInt(parts[2]);
            return new Date(year, month, day);
          }
        }

        // –§–æ—Ä–º–∞—Ç YYYY-MM-DD
        if (dateStr.includes("-")) {
          return new Date(dateStr);
        }
      }

      // –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ (Excel serial date)
      if (typeof dateStr === "number") {
        // Excel –¥–∞—Ç—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1900-01-01
        const excelEpoch = new Date(1900, 0, 1);
        const msPerDay = 24 * 60 * 60 * 1000;
        return new Date(excelEpoch.getTime() + (dateStr - 2) * msPerDay);
      }

      return null;
    } catch (error) {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: ${dateStr}`, error);
      return null;
    }
  }

  calculateMonthsDifference(startDate, endDate) {
    if (!startDate || !endDate) {
      return null;
    }

    try {
      // –†–∞–∑–Ω–æ—Å—Ç—å –≤ –≥–æ–¥–∞—Ö * 12 + —Ä–∞–∑–Ω–æ—Å—Ç—å –≤ –º–µ—Å—è—Ü–∞—Ö
      const months =
        (endDate.getFullYear() - startDate.getFullYear()) * 12 +
        (endDate.getMonth() - startDate.getMonth());

      // –£—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
      if (endDate.getDate() < startDate.getDate()) {
        return months - 1;
      }

      return months;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Å—è—Ü–µ–≤:", error);
      return null;
    }
  }

  updateProgress(percentage, text) {
    const progressFill = document.getElementById("progressFill");
    const progressText = document.getElementById("progressText");

    progressFill.style.width = percentage + "%";
    progressText.textContent = text;
  }

  displayResults(errors) {
    const resultsSection = document.getElementById("resultsSection");
    const resultsContent = document.getElementById("resultsContent");

    resultsContent.innerHTML = "";

    // –£—Å–ø–µ—à–Ω—ã–µ —Ñ–∞–π–ª—ã
    if (this.processedFiles.length > 0) {
      const successDiv = document.createElement("div");
      successDiv.className = "success-message";
      successDiv.innerHTML = `
                <i class="fas fa-check-circle"></i>
                –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${this.processedFiles.length}
            `;
      resultsContent.appendChild(successDiv);

      const downloadSection = document.createElement("div");
      downloadSection.className = "download-section";

      // –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã (ZIP)
      if (this.processedFiles.length > 1) {
        const downloadAllBtn = document.createElement("button");
        downloadAllBtn.className = "download-all-btn";
        downloadAllBtn.innerHTML = `
                    <i class="fas fa-download"></i>
                    –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã (ZIP)
                `;
        downloadAllBtn.addEventListener("click", () => this.downloadAllFiles());
        downloadSection.appendChild(downloadAllBtn);
      }

      // –û—Ç–¥–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
      const individualDiv = document.createElement("div");
      individualDiv.className = "individual-downloads";
      individualDiv.innerHTML = "<h4>üìÑ –°–∫–∞—á–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:</h4>";

      this.processedFiles.forEach((file) => {
        const downloadItem = document.createElement("div");
        downloadItem.className = "download-item";
        downloadItem.innerHTML = `
                    <div>
                        <i class="fas fa-file-excel" style="color: #28a745; margin-right: 10px;"></i>
                        <strong>${file.name}</strong>
                        <br>
                        <small style="color: #666;">–ò—Å—Ö–æ–¥–Ω—ã–π: ${file.originalName}</small>
                    </div>
                    <button class="download-btn" onclick="excelProcessor.downloadFile('${file.name}')">
                        <i class="fas fa-download"></i>
                        –°–∫–∞—á–∞—Ç—å
                    </button>
                `;
        individualDiv.appendChild(downloadItem);
      });

      downloadSection.appendChild(individualDiv);
      resultsContent.appendChild(downloadSection);
    }

    // –û—à–∏–±–∫–∏
    if (errors.length > 0) {
      const errorDiv = document.createElement("div");
      errorDiv.className = "error-section";
      errorDiv.innerHTML = `<h4><i class="fas fa-exclamation-triangle"></i> –û—à–∏–±–∫–∏ –≤ ${errors.length} —Ñ–∞–π–ª–∞—Ö:</h4>`;

      errors.forEach((error) => {
        const errorItem = document.createElement("div");
        errorItem.className = "error-item";
        errorItem.textContent = error;
        errorDiv.appendChild(errorItem);
      });

      resultsContent.appendChild(errorDiv);
    }

    resultsSection.style.display = "block";
    resultsSection.classList.add("fade-in");
  }

  downloadFile(fileName) {
    const file = this.processedFiles.find((f) => f.name === fileName);
    if (file) {
      const blob = new Blob([file.data], {
        type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
      });
      saveAs(blob, fileName);
    }
  }

  async downloadAllFiles() {
    if (typeof JSZip === "undefined") {
      // –ï—Å–ª–∏ JSZip –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É
      this.processedFiles.forEach((file) => this.downloadFile(file.name));
      return;
    }

    const zip = new JSZip();

    this.processedFiles.forEach((file) => {
      zip.file(file.name, file.data);
    });

    const content = await zip.generateAsync({ type: "blob" });
    const timestamp = new Date()
      .toISOString()
      .slice(0, 19)
      .replace(/[:]/g, "-");
    saveAs(content, `processed_files_${timestamp}.zip`);
  }

  showError(message) {
    console.error(message);
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    alert(message);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let excelProcessor;

document.addEventListener("DOMContentLoaded", function () {
  excelProcessor = new ExcelProcessor();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –±—Ä–∞—É–∑–µ—Ä–∞
  if (typeof XLSX === "undefined") {
    document.body.innerHTML = `
            <div style="padding: 50px; text-align: center; color: red;">
                <h2>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫</h2>
                <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel —Ñ–∞–π–ª–∞–º–∏.</p>
                <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>
            </div>
        `;
    return;
  }

  console.log("Excel Processor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
});
